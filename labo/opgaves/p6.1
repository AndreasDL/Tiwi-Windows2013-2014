<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="generator" content="intranetr/0.10.0">
<title>Reeks 6 | iii intranet</title>    <link rel="stylesheet" type="text/css" media="screen,handheld" href="../../css/default.css?0.10.0">
    <link rel="stylesheet" type="text/css" media="print" href="../../css/print.css?0.10.0">
    <link rel="stylesheet" type="text/css" media="screen,handheld" href="../../css/sites/default.css">
    <script type="text/javascript" src="../../js/cache/0d6197553acf19ea859c96f7caf7d8fa6c6519b8.js?0.10.0"></script>
<!--[if lt IE 8]>
<link rel="stylesheet" type="text/css" href="/css/ie.css">
<![endif]-->
    <script type="text/javascript">
    (function() {
        var month = 8;
        iii.semester = month == 1 ? 1
            : month <= 6 ? 2
            : month <= 9 ? 0 : 1;
        if (iii.semester > 0) {
            var hideOtherSemester = function() {
                var other = iii.semester == 1 ? 2 : 1;
                $('#breadcrumbs li.group-sem'
                        + other
                        + ':not(.group-sem'
                        + iii.semester + '):not(.active)')
                    .hide();
            };
            $(document)
                .ready(hideOtherSemester)
                .on("contentUpdate.iii", hideOtherSemester);
        }
    })();
    </script>
</head>

<body>
    <div id="header"><h1>
    <a href="../../index.html" title="Naar de thuispagina">
        intranet
    </a>
</h1>
</div>
<div id="main">    <div id="node-children">
    <ul>
            <li><a href="index.html"><span style="float: right">&#8593;</span>Omhoog</a></li>
            </ul>
    </div>

<div id="content" class="">
        <div id="breadcrumbs-container">
    <span id="you-are-here">Je bent hier:</span>
    <ul id="breadcrumbs">
                            <li class="breadcrumb first"><a href="../../index.html" class="breadcrumb first">Intranet</a>
                </li>
                            <li class="breadcrumb"><a href="../index.html" class="breadcrumb">Windows</a>
                    <ul class="breadcrumb-siblings">
                                                <li class="separator"><span>Tweede bachelor</span></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem2"><a class="breadcrumb-sibling group-sem2" href="../../Besturingssystemen-I/index.html">Besturingssystemen I</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1 leaf"><a class="breadcrumb-sibling group-sem1 leaf" href="../../Computernetwerken-I/index.html">Computernetwerken I</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1"><a class="breadcrumb-sibling group-sem1" href="../../Informatica-II/index.html">Informatica II</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem2"><a class="breadcrumb-sibling group-sem2" href="../../Softwareontwikkeling-I/index.html">Softwareontwikkeling 1</a></li>
                                                                <li class="separator"><span>Derde bachelor</span></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem2"><a class="breadcrumb-sibling group-sem2" href="../../Algoritmen-I/index.html">Algoritmen I</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem2 leaf"><a class="breadcrumb-sibling group-sem2 leaf" href="../../Computergrafiek/index.html">Computergrafiek</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1"><a class="breadcrumb-sibling group-sem1" href="../../Computernetwerken-II/index.html">Computernetwerken II</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem2"><a class="breadcrumb-sibling group-sem2" href="../../Computernetwerken-III/index.html">Computernetwerken III</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1"><a class="breadcrumb-sibling group-sem1" href="../../Databanken/index.html">Databanken</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1"><a class="breadcrumb-sibling group-sem1" href="../../Design-Patterns/index.html">Design Patterns</a></li>
                                                                                                                                                                                                                                                            <li class="breadcrumb-sibling group-sem1 group-sem2"><a class="breadcrumb-sibling group-sem1 group-sem2" href="../../Hardware/index.html">Hardware</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem2"><a class="breadcrumb-sibling group-sem2" href="../../OGP/index.html">OGP</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1 leaf"><a class="breadcrumb-sibling group-sem1 leaf" href="../../Systeemanalyse-I/index.html">Systeemanalyse I</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1"><a class="breadcrumb-sibling group-sem1" href="../../UNIX/index.html">UNIX</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1"><a class="breadcrumb-sibling group-sem1" href="../../Beveiliging/index.html">Beveiliging</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1"><a class="breadcrumb-sibling group-sem1" href="../../Computernetwerken-IV/index.html">Computernetwerken IV</a></li>
                                                                                                                                                                                                                                                            <li class="breadcrumb-sibling group-sem1 group-sem2 leaf"><a class="breadcrumb-sibling group-sem1 group-sem2 leaf" href="../../Masterproef/index.html">Masterproef</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1 leaf"><a class="breadcrumb-sibling group-sem1 leaf" href="../../Systeemanalyse-II/index.html">Systeemanalyse II</a></li>
                                                                                                                                                                                                                <li class="breadcrumb-sibling group-sem1 active"><a class="breadcrumb-sibling group-sem1 active" href="../index.html">Windows</a></li>
                                                                <li class="separator"><span>Algemeen</span></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="../../Activiteiten/index.html">Activiteiten</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="../../Huisregels-labos/index.html">Huisregels voor labo&#039;s</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="../../Opleiding-Informatica/index.html">Opleiding Informatica GTI</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="../../Andere-problemen/index.html">Probleemoplossende instanties</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling"><a class="breadcrumb-sibling" href="../../Roosters/index.html">Roosters</a></li>
                                        </ul>
                </li>
                            <li class="breadcrumb"><a href="index.html" class="breadcrumb">Labo</a>
                    <ul class="breadcrumb-siblings">
                                                                                                                                                    <li class="breadcrumb-sibling active"><a class="breadcrumb-sibling active" href="index.html">Labo</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="../Theorie/index.html">Theorie</a></li>
                                        </ul>
                </li>
                            <li class="breadcrumb"><a href="p6.1" class="breadcrumb">Reeks 6</a>
                    <ul class="breadcrumb-siblings">
                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p0.1">Reeks 0</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p1.1">Reeks 1</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p2.1">Reeks 2</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p3.1">Reeks 3</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p4.1">Reeks 4</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p5.1">Reeks 5</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf active current"><a class="breadcrumb-sibling leaf active current" href="p6.1">Reeks 6</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p7.1">Reeks 7</a></li>
                                                                                                                                                                    <li class="breadcrumb-sibling leaf"><a class="breadcrumb-sibling leaf" href="p8.1">Reeks 8</a></li>
                                        </ul>
                </li>
        </ul>
    </div>
    <h2>Reeks 6</h2>
    <div id="page-content">
        <h3>raadplegen en wijzigen van Active Directory objecten</h3>
<h4>Active Directory</h4>
Het domein <strong>iii.hogent.be</strong> beschikt momenteel over
twee <em>Domain Controllers</em>, <strong>Belial</strong> en
<strong>Satan</strong>, waarvan er één wordt toegekend bij elke
aanvraag om Active Directory informatie. Tijdens de labo's ben je
reeds ingelogd op het domein <strong>iii.hogent.be</strong>. Indien
je van thuis uit deze oefeningen wilt maken, ben je niet ingelogd
op het domein <em>iii.hogent.be</em> en zal je twee extra
instellingen moeten doen:
<ul>
<li>je moet de naam van de server (of van het domein) expliciet
opgeven. De <em>interne</em> DNS-naam en ip-adres van de
domeincontroller <strong>Satan</strong> zijn respectievelijk
<strong>satan.iii.hogent.be</strong> en
<strong>192.168.16.16</strong>. Aangezien de configuratie van het
<em>iii.hogent.be</em> domein en zijn toestellen van het publieke
Internet wordt afgeschermd, moet je als serveridentificatie steeds
expliciet de <em>externe</em> DNS-naam of ip-adres van een
domeincontroller opgeven. Bovendien is enkel <strong>Satan</strong>
publiek bereikbaar: hetzij via <strong>satan.hogent.be</strong>,
hetzij via <strong>193.190.126.71</strong>, .</li>
<li>je loginnaam/paswoord om toegang te krijgen tot het domein
moeten worden opgegeven.</li>
</ul>
Indien een VPN-connectie wordt geïnitialiseerd kan het voorkomen
dat Satan niet meer bereikbaar is, en dat het connecteren dus niet
lukt.
<h5>AdsiEdit</h5>
Om de AD omgeving intuïtief te benaderen gebruik je de grafische
interface <strong>AdsiEdit</strong>.<br>
Als je de eerste keer <strong>AdsiEdit</strong> opstart moet je
zelf de connectie maken met het domein. Indien je niet op het
domein bent ingelogd moet je de correcte DNS-naam of het correcte
ip-adres van de server opgeven, en onder <strong>Advanced</strong>
je loginnaam/paswoord ingeven. In tegenstelling tot WMI zitten de
klassen en de instanties in verschillende top-level containers van
AD, <em>partities</em> genoemd (zie theorie). In
<strong>AdsiEdit</strong> kan je connecteren met minimaal drie
partities:
<ul>
<li>de <em>schema partitie</em>: bevat de beschrijving van alle
beschikbare klassen en attributen (zie theorie over het reële (en
abstracte) schema, en de oefeningen verderop),</li>
<li>de <em>domain partitie</em> bevat de domeingegevens: dit zijn
"instanties" van de klassen. Elk domeingegeven wordt beschreven
door een <strong>AD&nbsp;object</strong> in het
<strong>domein</strong>,</li>
<li>de <em>configuration partitie</em> bevat
configuratiegegevens.</li>
</ul>
Bekijk met behulp van <strong>AdsiEdit</strong> een willekeurig
<strong>AD&nbsp;object</strong> in het <strong>domein</strong> en
vraag alle <strong>properties/eigenschappen</strong>. Je bekomt een
lijst met alle beschikbare <strong>LDAP-attributen</strong>,
ondermeer de <em>distinguishedName</em>, de
<em>Objectclass</em>,... Je kan ook de waarde opvragen van elk
<strong>LDAP-attribuut</strong>.
<h4>LDAP vs. ADSI</h4>
Er zijn twee manieren om Active Directory programmatorisch te
manipuleren: de <strong>Lightweight Directory Access Protocol
Application Program Interface (LDAP API)</strong>, en de
<strong>Active Directory Service Interfaces (ADSI)</strong>. Het
LDAP protocol definieert een aantal basis operaties bovenop TCP,
die het cliënts mogelijk maken om data in een willekeurige Active
Directory te raadplegen en aan te passen. De meeste operaties
bestaan uit eenvoudige <a class="popout" href=
"p6/adp0302.gif">vraag/antwoord wisselwerkingen</a>, analoog aan
deze in het HTTP protocol, tussen Web cliënt en server. De LDAP API
programmeerinterface wordt geïmplementeerd door de
<strong>wldap32.dll</strong> module van elk Windows platform met
een Active Directory cliënt, en bevat een aantal functies die het
de programmeertaal&nbsp;C toelaten om te communiceren met LDAP
servers. De LDAP API veroorzaken <strong>weinig overhead</strong>
en zijn hierdoor zeer snel. Bovendien zijn programma's die gebruik
maken van de LDAP API met geringe moeite
<strong>overdraagbaar</strong> op andere besturingssystemen. De
LDAP API voorzien niet in een object georiënteerde interface. Het
programmeren van eenvoudige cliënts is ondermeer daardoor <a class=
"popout" href="p6/LDAPEnumTop.txt">vrij primitief</a>. Ook is
het moeilijk om de LDAP API aan te wenden in andere
programmeeromgevingen dan&nbsp;C.
<p>ADSI daarentegen voorziet in <strong>COM objecten</strong> die
de low-level LDAP API verbergen in hun implementatie, en een
<strong>object georiënteerde functionaliteit</strong> aanbieden.
Elk <a class="popout" href="p6/adp0308.gif"><strong>Active
Directory object</strong></a> wordt door ADSI gerepresenteerd als
een <a class="popout" href="p6/adp0308.gif"><strong>ADSI
object</strong></a> <strong>in de geheugenruimte van de
cliënt</strong>. De <a class="popout" href=
"p6/adp0303.gif">provider architectuur</a> maakt het mogelijk om
niet alleen de Windows Server Active Directory te manipuleren, maar
ook andere directories zoals de <em>global catalog</em>, de
<em>Novell Directory Services (NDL)</em>, de <em>metabase</em> van
de <em>Internet Information Server (IIS)</em>, en zelfs de <em>SAM
van NT&nbsp;4.0</em>: specifieke <strong>providers</strong>
communiceren met specifieke directories. Hoe ze dit doen is
volledig afgeschermd van de cliënt toepassingen. ADSI is
geïmplementeerd als een <strong>in-process</strong> COM component.
De overhead op de performantie blijft hierdoor beperkt. ADSI kan
gebruikt worden vanuit om het even welke programmeertaal. Bovendien
zijn de meeste van de 58 ADSI interfaces <strong>duaal</strong>, en
kunnen ze bijgevolg ook via <em>late binding</em> vanuit
scriptomgevingen aangesproken worden, (zoals WSH met PerlScript of
VBScript, in deze labo's). <strong>Enkel Windows</strong> cliënts
daarentegen ondersteunen ADSI. De meeste ADSI interfaces zijn
gemeenschappelijk voor alle providers, een aantal andere zijn
specifiek.</p>
<p>Deze reeks beperkt zich tot een omschrijving van de
belangrijkste technieken om een <strong>AD&nbsp;object</strong> te
<strong>onderzoeken</strong> door de <em>attributen</em> en
<em>methods</em> aan te sprekende van het bijhorende <strong>ADSI
object</strong>. In de volgende reeks gaan we leren hoe je snel
<strong>AD&nbsp;objecten</strong> kan <strong>opzoeken</strong> aan
de hand van hun eigenschappen. In de laatste reeks leren we ook hoe
je de <strong>eigenschappen</strong> van deze objecten kan
<strong>wijzigen</strong>.</p>
<p>In de <strong>MSDN Library</strong> vind je heel wat
documentatie in de sectie <em>WIN32 and COM Development</em>&nbsp;
/ &nbsp; <nobr><em>Administration and Management</em></nobr>&nbsp;
/ &nbsp;<nobr><em>Directory Services</em></nobr> &nbsp; / &nbsp;
<nobr><em>SDK Documentation</em></nobr>&nbsp; / &nbsp;
<nobr><em>Directory Services</em></nobr><br>
(In de nieuwe versie <strong>MSDN Library 2008 SP1</strong> staat
deze sectie op een andere plaats, nl <nobr><em>WIN32 and COM
Development</em></nobr> / <nobr><em>Administration and
Management</em></nobr> / <nobr><em>Directory, Identity, and Access
Services</em></nobr> / <nobr><em>Directory Services
Overview</em></nobr> )<br>
We gebruiken twee subtakken:</p>
<ul>
<li>De ADSI-interface wordt beschreven in de tak
<nobr><em>Directory Access Technologies</em></nobr> /
<nobr><em><strong>A</strong>ctive <strong>D</strong>irectory
<strong>S</strong>ervice <strong>I</strong>nterfaces</em></nobr> /
<nobr><em>Active Directory Service Interfaces Reference</em></nobr>
.<br>
We noemen deze tak kortweg de <strong>ADSI Library</strong>.</li>
<li>Informatie over Active Directory zoek je op in de tak
<em>Directories</em>. Deze tak noemen we de <strong>AD
Library</strong></li>
</ul>
We zullen in de volgende oefeningen een aantal interessante
subtakken vermelden (zie ook overzicht).
<dl class="compact">
<dt>1.</dt>
<dd>In het <strong>register</strong> vind je de takken
<strong>LDAP</strong> en <strong>LDAPnamespace</strong>. Beiden
refereren (via de CLSID-tak) naar dezelfde Type Library
<strong>Active DS Type Library</strong>, met GUID
<strong>97D25DB0-0363-11CF-ABC4-02608C9E7553</strong>, waar je alle
constanten kan terugvinden. Herneem oefening 9 uit reeks 1 om alle
constanten te tonen van deze bibliotheek.</dd>
</dl>
<h4>Binding van de Active Directory&nbsp;objecten</h4>
Net als bij WMI start elke communicatie met de Active Directory
services met het <em>binden</em> van een
<strong>AD&nbsp;object</strong> (op de server) aan een
<strong>ADSI&nbsp;object</strong> (in de geheugenruimte van de
cliënt). Het <strong>AD&nbsp;object</strong> wordt beschreven met
behulp van de <strong>ADsPath moniker</strong>.
<h5>De ADsPath moniker</h5>
De ADsPath moniker bestaat uit drie delen en beschrijft zowel de
ADSI provider die aangesproken moet worden, als het AD&nbsp;object
dat men wil <em>binden</em>, de <em>facultatieve</em> elementen
staan tussen vierkante haakjes:
<table border="0" width="100%">
<tr>
<td width="5%">&nbsp;</td>
<td><em>provider</em><strong>://</strong> [<em>server</em> |
<em>domein</em> [ <strong>:</strong> <em>poort</em> ]
<strong>/</strong> ] <em>distinguishedName</em></td>
</tr>
</table>
<ul>
<li><strong>provider</strong>: hier <strong>moet</strong> hetzij
<strong>LDAP</strong>, hetzij <strong>GC</strong> gespecifieerd
worden, afhankelijk of we de domeingegevens, het schema, de
configuratiegevens, dan wel de global catalog willen aanspreken.
Andere ADSI compatibele providers, zoals <strong>NDS</strong>,
<strong>NWCOMPAT</strong>, <strong>IIS</strong> of
<strong>WinNT</strong>, komen in deze labo's niet aan bod. Je vindt
meer informatie in de subtak <nobr><em>Adsi Service
Providers</em></nobr> van de <strong>ADSI Library</strong>. Ga
verder naar de sectie <em>ADSI LDAP Provider / LDAP ADsPath</em>
voor alle informatie over de "ADsPath moniker" in LDAP.</li>
<li><strong>[server | domein [:poort] /]</strong> : het poortnummer
mag je weglaten, LDAP en GC als providers impliceren
respectievelijk TCP poorten 389 en 3268 als <em>default</em>. Het
|-teken maakt hierbij geen deel uit van ADsPath, maar duidt aan dat
hetzij een server, hetzij een domein kan gespecifieerd worden.
Indien enkel een <strong>domeinidentificatie</strong> (hetzij DNS
domeinnaam, hetzij SAM accountnaam) vermeld wordt, poogt de lokale
LDAP cliënt <strong>via DNS</strong> te achterhalen welke server de
provider ondersteunt. Indien een
<strong>serveridentificatie</strong> (DNS domeinnaam, SAM
accountnaam) vermeld wordt, richt de cliënt zich rechtstreeks tot
deze server. Je kan hier echter ook het <strong>ip-adres</strong>
van de server opgeven, waardoor de DNS interactie vermeden wordt
(ga na dat het <em>interne</em> ip-adres van Satan 192.168.16.16
is). Thuis gebruik je uiteraard het externe ip-adres.<br>
Indien zowel de server als het domein ontbreekt, wordt het domein
gebruikt van de ingelogde gebruiker. Enkel indien je als gebruiker
bent ingelogd in het Active Directory domein waarvan je informatie
opvraagt, is het toegelaten om hier <strong>helemaal niets</strong>
te vermelden. </li>
<li><strong>distinguishedName</strong> : verwijst naar het
AD&nbsp;object in het domein en kan je opzoeken in
<strong>AdsiEdit</strong></li>
</ul>
<dl class="compact">
<dt>2.</dt>
<dd>Bepaal de ADsPath moniker van de twee <em>Domain
Controllers</em> <strong>Belial</strong> en <strong>Satan</strong>?
Gebruik <strong>AdsiEdit</strong> om de
<strong>distinguishedName</strong> op te zoeken. Wat is deze
moniker als je thuis werkt? Wat is de moniker als je op school
werkt en dus ingelogd bent op het domein.
<p><a class="popout" href="p6/02.pl">antwoord</a></p>
</dd>
</dl>
<h5>Connecteren met PowerShell</h5>
De methode een <strong>PS Object</strong> te initialiseren is
verschillend indien je wel/niet ingelogd bent op het domein. Indien
je ingelogd bent dan kan di heel eenvoudig met:
<pre>
 $adObject = [adsi] $moniker 
</pre>
Indien je niet ingelogd bent op het domein, dan is het wat
complexer:
<pre>
$adObject = New-Object System.DirectoryServices.DirectoryEntry ($moniker,"Interim F","Interim F")
</pre>
De twee laatste parameters zijn de "username" en "pasword" waarmee
je toegang hebt tot het domein.<br>
De waarde van <code>$moniker</code> is net als hiervoor ingevuld.
We gaan in deze labo's niet verder in op de mogelijkheden die je nu
hebt in PowerShell, maar <strong>Get-Member</strong> kan je alvast
op weg helpen. In een aantal oplossingen wordt ook een opmerking
toegevoegd ivm PowerShell.
<h5>Initialiseren van een ADSI object in PerlScript</h5>
De methode om een <strong>ADSI object</strong> te initaliseren is
ook nu afhankelijk van de situatie. Indien je bent ingelogd op het
domein kan je dezelfde methode gebruiken als bij WMI-objecten:
<pre>
     my $object=Win32::OLE-&gt;GetObject(<em>moniker</em>);
</pre>
De terugkeerwaarde is een <strong>ADSI object</strong> dat
refereert naar het AD&nbsp;object, beschreven door de
<em>moniker</em>.<br>
Je kan GEEN gebruik maken van
<code>Win32::OLE-&gt;QueryObjectType($object)</code> om te
controleren of je inderdaad een object hebt geïnitialiseerd. Deze
methode geeft altijd <strong>undef</strong>. Met de perl-methode
<code>ref</code> kan je wel nagaan of je een
<strong>Win32::OLE</strong> object hebt. Indien het initialiseren
niet lukt wordt een fout opgeworpen met meer informatie (gebruik
<strong>Win32::OLE-&gt;LastError()</strong>)
<dl class="compact">
<dt>3.</dt>
<dd>&nbsp;<strong>Enkel op school:</strong> Gebruik de diverse
alternatieven voor de moniker om een domeincontroller <em>Belian,
Satan</em> te initialiseren als <strong>ADSI object</strong>.
Probeer ook eens een verkeerde moniker.
<p><a class="popout" href="p6/03.pl">antwoord</a></p>
</dd>
<dt>4.</dt>
<dd>&nbsp;<strong><em>Binden op afstand</em></strong>
<p>Indien je <strong>niet ingelogd bent op het domein</strong> dan
moet je bij elke binding operatie een verificatie procedure
aanvragen. In de <strong>ADSI Library</strong> vind je in de subtak
<em><nobr>ADSI Interfaces</nobr> / <nobr>Core Interfaces</nobr> /
IADsOpenDSObject</em> alle noodzakelijke infomatie over de
<em>IADsOpenDSObject</em> interface, die specifiek is ontworpen om
te kunnen voorzien in een <em>secure</em> context om een AD-object
te binden. Met <em>GetObject</em> initialiseer je een <strong>LDAP
object</strong>. Dan gebruik je de <strong>OpenDSObject</strong>
methode van dit <strong>LDAP object</strong>. Deze methode verwacht
nog drie andere argumenten: de loginnaam en het paswoord om in het
domein in te loggen en een geheel getal, die bits-gewijze
informatie bevat. De <em>bind_object</em> functie in het
onderstaand voorbeeld illustreert dit.<br>
Probeer ook eens een verkeerde moniker en lees de foutmelding.</p>
<p><a class="popout" href="p6/04.pl">voorbeeld</a></p>
</dd>
<dt>5.</dt>
<dd>Maak één <em>bind_object</em> functie die je zowel op school
als thuis kan gebruiken, en doe de volgende aanpassingen:
<ul>
<li>de functie controleert zelf of je al dan niet in het domein
<strong>iii.hogent.be</strong> bent ingelogd, en gebruikt de
eenvoudigste binding. Gebruik hiervoor de perl-variabele
<strong>%ENV</strong></li>
<li>de functie aanvaardt zowel een <em>moniker</em> als een
<em>distinguishedName</em> als argument</li>
</ul>
<p>Alle oplossingen voor de oefeningen in deze en volgende secties
zullen dan ook een beroep doen op deze functie, waardoor het script
zowel in als buiten de klaslokalen ongewijzigd uitvoerbaar is.</p>
<p><a class="popout" href="p6/05.pl">antwoord</a></p>
</dd>
</dl>
<h5>ADSI objecten met ADSI-attributen en ADSI-methoden</h5>
De eenvoudigste methode om AD-objecten te manipuleren is door
gebruik te maken van de <em>ADSI Interfaces</em> die beschikbaar
zijn voor de ADSI objecten. Er zijn meerdere ADSI interfaces, die
elk hun eigen ADSI-methodes en ADSI-attributen aanbieden. Je vindt
hierover enkel informatie in de <strong>ADSI Library</strong>, en
dus NIET in <strong>AdsiEdit</strong>!!!<br>
Bekijk het handig overzicht van de ADSI interfaces voor elk type
ADSI object in volgende secties:
<ul>
<li><em><nobr>ADSI Interfaces</nobr> / <nobr>ADSI Objects and
Interfaces</nobr> / <nobr>ADSI Object Model for LDAP
Providers</nobr></em>,</li>
<li><em><nobr>ADSI Service Providers</nobr> / <nobr>ADSI LDAP
Provider</nobr> / <nobr>ADSI Objects of LDAP</nobr></em></li>
</ul>
Omdat elk ADSI object ook een <strong>GenObject</strong> is, zijn
een aantal ADSI&nbsp;interfaces, zoals <strong>IADs</strong>,
<strong>IADsContainer</strong>, <strong>IADsPropertyList</strong>
en <strong>IDirectorySearch</strong>, generisch. Ze bieden
gemeenschappelijke ADSI-attributen en methods aan, bruikbaar voor
<strong>alle</strong> ADSI objecten.<br>
Informatie over de ADSI-interface vind je enkel in de <strong>ADSI
Library</strong>, in de subtak <em><nobr>ADSI
Interfaces</nobr></em>. Het overzicht <em><nobr>Alphabetical
Listing of ADSI Interfaces</nobr></em> toont dat de
ADSI&nbsp;interfaces opgedeeld worden in categoriën. De
documentatie is verder gestructureerd volgens categorie. Zo vind je
informatie over <strong>IADs</strong> terug in de subtak <em>Core
Interfaces</em>. In de subtak <em>IADs</em> vind je uiteindelijk de
lijst van ADSI-attributen in de tak <em>IADs Property Methods</em>.
<dl class="compact">
<dt>6.</dt>
<dd>Zoek in de manual de 6 ADSI-attributen die beschikbaar zijn via
de <strong>IADs</strong> interface. Initialiseer een ADSI object
naar keuze (bijvoorbeeld een domaincontroller), en schrijf de
waarde van deze zes ADSI-attributen uit.<br>
<strong>Opmerking PowerShell:</strong> je kan deze ADSI-attributen
ook opvragen in PowerShell, maar de meeste ontbreken in de lijst
die je krijgt bij <strong>| Get-Member</strong>.
<p><a class="popout" href="p6/06.pl">antwoord</a></p>
</dd>
<dt>7.</dt>
<dd>Om snel na te gaan of de initialisatie van een ADSI object
gelukt is, kan je het <strong>AdsPath</strong> van dit object
uitschrijven. Dit ADSI-attribuut is altijd beschikbaar.<br>
Voor de meeste ADSI&nbsp;objecten zijn er ook een aantal
ADSI&nbsp;interfaces, die specifiek zijn voor de klasse
(bijvoorbeeld <strong>IADsUser</strong> voor <em>user</em>
AD&nbsp;objecten).<br>
Initialiseer een ADSI-object met de AD-object dat je eigen user
beschrijft. De gegevens van jezelf vind je terug in een
<em>user</em> object in de container met <em>canonicalName</em>
<strong>/iii.hogent.be/iii/studenten/EM7INF</strong>. Toon voor dit
AD-object het <strong>AdsPath</strong> en het mail-adres.
<p><a class="popout" href="p6/07.pl">antwoord</a></p>
</dd>
</dl>
<h5>AD objecten met LDAP-attributen versus ADSI objecten met
ADSI-attributen</h5>
De ADSI-attributen van een ADSI object, door Microsoft meestal
<em>properties</em> genoemd, worden door meerdere interfaces
vastgelegd. Met deze ADSI-attributen kan maar een beperkt deel van
de eigenschappen van AD objecten worden verwerkt.<br>
Er is veel meer informatie beschikbaar in de
<strong>LDAP-attributen</strong> van de <strong>AD
objecten</strong>. De Microsoft documentatie spreekt doorgaans van
<em>attributes</em>, zondermeer. De LDAP-attributen van een AD
object liggen vast in het schema van Active Directory (zie
theorie). De naam, de syntax en de inhoud van alle beschikbare
LDAP-attributen van een specifiek AD object kan je wel bekijken met
<strong>AdsiEdit</strong>.
<p>Er is geen 1-op-1 verband tussen de
<strong>LDAP-attributen</strong> van het <strong>AD
object</strong>, en de <strong>ADSI-attributen</strong> van het
overeenkomstige <strong>ADSI object</strong>. Er zijn
LDAP-attributen die geen ADSI equivalent hebben, en omgekeerd.
Bovendien hebben overeenkomstige ADSI- en LDAP-attributen dikwijls
een verschillende naam, en soms zelfs een ander formaat. Er is soms
een groot verschil tussen syntax en inhoud van een LDAP-attribuut
en zijn <em>overeenkomstig</em> ADSI-attribuut. Twee redenen zijn
hiervoor verantwoordelijk:</p>
<ul>
<li>ADSI biedt ook een interface naar andere directories dan de
Active Directory van Windows Server,</li>
<li>ADSI bestaat uit een aantal interfaces, waarvan een aantal
specifiek zijn voor een bepaalde klasse AD&nbsp;objecten
(bijvoorbeeld <strong>IADsUser</strong> voor <em>user</em>
AD&nbsp;objecten). Elke interface implementeert slechts een beperkt
aantal attributen.</li>
</ul>
<p>Onderstaande tabel geeft <strong>enkele voorbeelden</strong> van
ADSI-attributen uit <strong>IADs</strong> met hun overeenkomstige
LDAP-attribuut.</p>
<table border="1" align="center">
<tr>
<th colspan="2">IADs<br>
(alle objecten)<br></th>
</tr>
<tr>
<th>ADSI-attribuut</th>
<th>LDAP-attribuut</th>
</tr>
<tr>
<td>GUID ( string / singlevalued )</td>
<td>objectGUID ( <strong>byte</strong>-string / singlevalued )</td>
</tr>
<tr>
<td>ADsPath ( string / singlevalued )</td>
<td>distinguishedName (string / singlevalued )</td>
</tr>
<tr>
<td>Class ( string / singlevalued )</td>
<td>objectClass ( string / <strong>multi</strong>-valued )</td>
</tr>
</table>
<dl class="compact">
<dt>8.</dt>
<dd>Schrijf een script dat van om het even welk AD object (kies
zelf een correcte moniker) de waarden uitschrijft van alle
attributen die in bovenstaande tabel beschreven werden.<br>
Je mag voor elk attribuut de informatie over de syntax
<em>hardcoderen</em>. Om na te gaan of een bepaalde inhoud al dan
niet (een referentie naar) een array voorstelt, kan je
<strong>ref</strong> gebruiken. Om een <em>bitstring</em> om te
zetten naar een gewone string kan je gebruik maken van
<nobr><strong>sprintf ("%*v02X ","", $var)</strong></nobr>
<p><a class="popout" href="p6/08.pl">antwoord</a></p>
</dd>
<dt>9.</dt>
<dd>De vervollediging van onderstaande tabel voor
<strong>IADsUser</strong> vind je in de <strong>ADSI
Library</strong> in de tak <em><nobr>ADSI Service
Providers</nobr></em> / <nobr><em>ADSI LDAP Provider</em></nobr> /
<nobr><em>LDAP User Object</em></nobr> / <nobr><em><nobr>Mapping
between IADsUser Properties and Active Directory
Properties</nobr></em>. Je vindt geen analoog overzicht voor de
andere ADSI&nbsp;interfaces.</nobr>
<table border="1" align="center">
<tr>
<th colspan="2">IADsUser<br>
(enkel User objecten)<br></th>
</tr>
<tr>
<th>ADSI-attribuut</th>
<th>LDAP-attribuut</th>
</tr>
<tr>
<td>EmailAddress</td>
<td>mail</td>
</tr>
<tr>
<td>FirstName</td>
<td>givenName</td>
</tr>
<tr>
<td>LastName</td>
<td>sn</td>
</tr>
<tr>
<td>FullName</td>
<td>displayName</td>
</tr>
<tr>
<td>HomeDirectory</td>
<td>homeDirectory</td>
</tr>
<tr>
<td>LoginScript</td>
<td>scriptPath</td>
</tr>
<tr>
<td>Profile</td>
<td>profilePath</td>
</tr>
<tr>
<td>LoginHours</td>
<td>logonHours</td>
</tr>
<tr>
<td>LoginWorkstations</td>
<td>userWorkstations</td>
</tr>
</table>
<p>Initialiseer opnieuw een <em>user</em> object dat je eigen
informatie bevat. Schrijf de waarde van deze 9 LDAP-attributen uit
(!geen gebruik maken van de ADSI-attributen). Niet alle
LDAP-attributen zijn ingesteld.</p>
<p><a class="popout" href="p6/09.pl">antwoord</a></p>
</dd>
</dl>
<h5>Enkele extra mogelijkheden</h5>
<dl class="compact">
<dt>10.</dt>
<dd>&nbsp;<strong><em>AD-gegevens opzoeken met
dsquery</em></strong>
<p>De Windows Server 2003 opdracht <strong>dsquery</strong>,
cfr.§2.2.3 van de theoriecursus, biedt zeer interessante
mogelijkheden om snel een een AD-object op te zoeken en er ook de
LDAP-attributen van op te vragen. Voer dit commando zonder
argumenten uit in een DOS-venster, en je krijgt uitgebreide
informatie. In de volgende reeks leren we dit soort aanvragen in
een script uitwerken met een <em>LDAP-query</em>.<br>
Zoek je eigen AD-object op, door enkel je naam op te geven. Vraag
met een tweede aanroep de waarde van zijn LDAP-attribuut
objectclass en mail.</p>
<p>Indien je <a href=
"http://www.microsoft.com/downloads/details.aspx?FamilyID=c16ae515-c8f4-47ef-a1e4-a8dcbacff8e3&amp;DisplayLang=en">
dsquery</a> van buiten het domein wilt gebruiken, dan moet je extra
opties (<strong>-s</strong>, <strong>-u</strong>, en
<strong>-p</strong>) toevoegen om je toegang tot het domein te
authentificeren. Bekijk de help met <strong>dsquery user
/?</strong></p>
<p><a class="popout" href="p6/10.pl">antwoord</a></p>
</dd>
<dt>11.</dt>
<dd>&nbsp;<strong><em>Binding via objectGUID</em></strong> (moet je
niet kennen)
<p>Men kan om te <em>binden</em> in de moniker ook verwijzen naar
het <strong>GUID</strong> van het object, in plaats van naar de
distinguishedName. Hiertoe moet men volgende notatie gebruiken:</p>
<table border="0" width="100%">
<tr>
<td width="5%">&nbsp;</td>
<td>
<em>provider</em><strong>://</strong>[<em>server</em>|<em>domein</em>[<strong>:</strong><em>poort</em>]<strong>/</strong>]<strong>&lt;GUID=</strong><em>GUID</em><strong>&gt;</strong></td>
</tr>
</table>
Binding via GUID laat toe om een object te localiseren dat
ondertussen van naam zou veranderd zijn, of zou verplaatst zijn
naar een andere container of zelfs naar een ander domein. Binding
via objectGUID wordt dan ook dikwijls toegepast voor cruciale
objecten in AD. <br>
In Windows Server 2003 heeft enkel het <em>AdsPath</em>
ADSI-attribuut van het object een andere waarde, alnaargelang men
de binding uitvoert via de <strong>GUID</strong> of via de
<strong>distinguishedName</strong>. Alle andere LDAP- en ADSI-
attributen van het object geven dezelfde waarde. In Windows 2000
bleken de onderlinge verschillen groter. Onderstaand voorbeeld
controleert een beperkt aantal attributen.
<p><a class="popout" href="p6/11.pl">voorbeeld</a></p>
</dd>
<dt>12.</dt>
<dd>&nbsp;<strong><em>Serverless Binding</em></strong>
<p>Het wordt algemeen als een slechte programmeerstijl bestempeld
indien men expliciet verwijst naar de naam van het geraadpleegde
domein. Indien je al aangemeld bent op het domein, kan je
systematisch de server- of domeinreferentie in de moniker
weglaten.<br>
Je kan echter ook de <strong>distinguishedName van de root van het
domein</strong> dynamisch achterhalen. Hiervoor wordt een speciaal
ADSI object aangesproken, het <strong>RootDSE</strong> (wat staat
voor <em>Root Directory System Agent Specific Entry</em>) object,
dat informatie bevat omtrent de directory service zelf. Dit is een
<em>virtueel</em> object maakt niet echt deel uitmaakt van de
directory tree. Je kan <em>RootDSE</em> echter wel connecteren in
<strong>AdsiEdit</strong>, Je kan er ook de <em>Properties</em>
opvragen. Er is echter geen klasse <em>RootDSE</em> in het schema,
en de meeste properties staan niet in het schema (tenzij ze ook
gebruikt worden door andere klassen).<br>
Informatie over dit RootDSE object vind je ook snel terug in de
<strong>AD Library</strong>, in de tak <nobr><em>Active Directory
Schema</em></nobr> &nbsp; / &nbsp; <nobr><em>RootDSE</em></nobr>.
De ADSI-attributen leveren veel interessante informatie, ondermeer
omtrent de <strong>AD&nbsp;server</strong> die de request
beantwoord heeft. Bekijk onderstaand voorbeeld.</p>
<p><a class="popout" href="p6/12.pl">voorbeeld</a></p>
</dd>
<dt>13.</dt>
<dd>Het <strong>RootDSE</strong> ADSI&nbsp;object vraagt toch wat
extra aandacht:
<ul>
<li>Als je enkel de waarde van het ADSI-attribuut
<code>defaultNamingContext</code> ophaalt, dan is dit niet
ingevuld. Vraag je vooraf ook de waarde van het ADSI-attribuut
<code>dnsHostName</code>, dan wordt dit probleem opgelost. Dit
heeft te maken met de property Cache (zie later)</li>
<li>Als je de waarde ophaalt van de zes ADSI-attributen van de
<strong>IADs</strong> interface, dan zijn ze niet allemaal
ingesteld. Verklaar waarom.</li>
</ul>
Bekijk onderstaand voorbeeld, en kijk wat er gebeurt als je de twee
laatste attributen verwisselt van plaats.
<p><a class="popout" href="p6/13.pl">voorbeeld</a></p>
</dd>
<dt>14.</dt>
<dd>&nbsp;<strong><em>Well-known GUIDs</em></strong> (moet je niet
kennen)
<p>Voor de belangrijkste containers van de AD&nbsp;structuur, zoals
<strong>Users</strong>, <strong>Computers</strong>,
<strong>System</strong> en <strong>Domain Controllers</strong>, is
er een voorgedefinieerde lijst van GUIDs, die men de
<em>well-known</em> GUIDs noemt. Om deze te gebruiken, moet men
volgende notatie gebruiken:</p>
<table border="0" width="100%">
<tr>
<td width="5%">&nbsp;</td>
<td>
<em>provider</em><strong>://</strong>[<em>server</em>|<em>domein</em><strong>/</strong>]<strong>&lt;WKGUID=</strong><em>GUID</em><strong>,</strong><em>domeinDN</em><strong>&gt;</strong></td>
</tr>
</table>
Indien men van deze GUIDs gebruik maakt, zijn programma's bestand
tegen het hernoemen en verplaatsen van deze containers. Helaas is
de lijst van <em>Well-known</em> GUIDs niet opgenomen in een type
library, zodat men ze in een script moet <em>hard-coderen</em>. Het
<em>binden</em> via <em>well-known</em> GUID vertoont meer
discrepanties dan het binden via GUID, zoals je in het onderstaand
voorbeeld kan zien. Deze techniek wordt meestal slechts gebruikt om
de juiste DN van het object te achterhalen, en daarna het object
opnieuw te binden via deze DN.
<p><a class="popout" href="p6/14.pl">voorbeeld</a></p>
</dd>
</dl>
<h4>Container objecten</h4>
Elk AD object kan gebruikt worden als container voor andere AD
objecten. Het aflopen van alle kind objecten van een container
object is één van de meest voorkomende AD&nbsp;handelingen. De
<strong>foreach</strong> lus in PerlScript is hiervoor uitermate
geschikt.
<dl class="compact">
<dt>15.</dt>
<dd>Geef de naam van alle computers in een bepaald PC-lokaal. Het
lokaal wordt als parameter opgegeven.<br>
Zoek met <strong>dsquery</strong> welke AD container deze
informatie bevat door je eigen computer te zoeken.
<p>Bepaal ook alle AD objecten in de container met
<em>canonicalName</em> <strong>/iii.hogent.be/system</strong>, en
schrijf uit tot welke <em>klasse</em> elk AD object behoort.
Vergelijk dit met <strong>AdsiEdit</strong>. Je hebt onvoldoende
machtiging om alle objecten op te halen.</p>
<p><a class="popout" href="p6/15.pl">antwoord</a></p>
</dd>
</dl>
Meer mogelijkheden met containers vind je in de
<strong>IADsContainer</strong> interface. Zoek in de <strong>ADSI
Library</strong> de volgende methodes:
<ul>
<li><strong>GetObject</strong> resulteert in een object referentie
naar een kind object met specifieke RDN,</li>
<li><strong>Create</strong> creëert een nieuw kind object,</li>
<li><strong>Delete</strong> vernietigt een kind object, op
voorwaarde dat dit object geen andere objecten bevat. Indien je een
container object <strong>recursief</strong> wil verwijderen, dan
kun je een beroep doen op de <strong>DeleteObject</strong> method
van de <strong>IADsDeleteOps</strong> interface.</li>
<li><strong>MoveHere</strong> verplaatst een willekeurig object
naar de huidige container.</li>
</ul>
De <strong>IADsContainer</strong> interface heeft ook drie
ADSI-attributen. Het <strong>Count</strong> attribuut wordt door de
LDAP provider van Windows Server niet ondersteund. Handig is het
<strong>Filter</strong> attribuut, waarmee je een filter kan
beschrijven die de klasse (<em>user, group, computer,...</em>)
bepaalt van de kind objecten. Dit attribuut is een referentie naar
een ARRAY waarin je de klassen opgeeft. Met dit attribuut beperkt
de container zich tot kind objecten die tot één van dit klassen
behoort, of waarvan de klasse van die superklasse is afgeleid.
Filtering wordt <strong>op server niveau</strong> uitgevoerd, en
kan bijgevolg de performantie positief beïnvloeden.
<dl class="compact">
<dt>16.</dt>
<dd>Onderstaand voorbeeld toont enkel de AD-objecten van een
bepaald type in de <strong>Users</strong>-container en toont ook
hoe je een kind object kan initialiseren met de methode
<strong>GetObject</strong>
<p><a class="popout" href="p6/16.pl">voorbeeld</a></p>
</dd>
<dt>17.</dt>
<dd>Zoals je met <strong>AdsiEdit</strong> kan nagaan, geeft de
LDAP-provider toegang tot minimaal drie top-level containers,
<em>partities</em> genoemd:
<ul>
<li>de <em>domain partitie</em> bevat domeingegevens</li>
<li>de <em>configuration partitie</em> bevat
configuratiegegevens</li>
<li>de <em>schema partitie</em> bevat het reële (en abstracte)
schema</li>
</ul>
Gebruik het ADSI object <strong>RootDSE</strong> om de
distinguishedName te bepalen van deze drie partities.
<p><a class="popout" href="p6/17.pl">antwoord</a></p>
</dd>
<dt>18.</dt>
<dd>In elke partitie zitten objecten die tot verschillende
<em>klassen</em> behoren. Schrijf een functie die
<strong>recursief</strong> alle objecten in een specifieke partitie
overloopt. In de volgende reeks zullen we een veel efficiëntere
methode zien om deze informatie op te zoeken. Bepaal vervolgens
zowel het aantal verschillende klassen dat effectief voorkomt, als
het aantal objecten er telkens zijn voor elke klasse. Geef hierbij
een overzicht, geordend op het aantal objecten in de klasse.<br>
Geef je script argumenten mee om aan te geven welke partities je
wilt zien (bijvoorbeeld 0=domein, 1 = configuration, 2=schema).
Indien geen argumenten worden opgegeven, dan toon je de informatie
voor de drie partities.
<p><a class="popout" href="p6/18.pl">antwoord</a></p>
</dd>
</dl>
<h4>Raadplegen en wijzigen van Active Directory objecten</h4>
Het opvragen van <strong>ADSI-</strong> en
<strong>LDAP-attributen</strong> hebben we tot nu toe gedaan met de
<strong>-&gt;{&nbsp;&nbsp; }</strong> -notatie. Voor
ADSI-attributen is dit de enige mogelijkheid, en levert dit ook
geen problemen op.
<h5>Raadplegen (en wijzigen) van AD-objecten via
ADSI-attributen</h5>
De eerste, meest eenvoudige manier om AD-objecten te manipuleren is
via de ADSI-attributen, in oefening 6-9 werd dit reeds toegelicht.
Niet alle LDAP-attributen hebben echter een corresponderend
ADSI-attribuut. Slechts voor een beperkt aantal klassen is er een
ADSI&nbsp;interface die LDAP-attributen mapt op ADSI-attributen, en
meestal gebeurt dit dan nog enkel voor de meest gebruikte
attributen. Zo heeft de <em>user</em> klasse 207 LDAP-attributen,
maar worden hiervan slechts 37 door de <strong>IADsUser</strong>
interface ter beschikking gesteld.
<dl class="compact">
<dt>19.</dt>
<dd>Het onderstaand voorbeeld toont de inhoud van de
ADSI-attributen voor de Administrator van het iii domein. Tussen
haakjes wordt telkens het overeenkomstige LDAP-attribuut vermeld.
Sommige ADSI-attributen, zoals <strong>AccountDisabled</strong>,
<strong>IsAccountLocked</strong> en
<strong>PasswordRequired</strong> komen overeen met individuele
bits van een LDAP-attribuut (in dit geval
<strong>userAccountControl</strong>), en vermijden bijgevolg dat je
zelf bitsgewijs moet verwerken (zie volgende oefening). Het gebruik
van ADSI-attributen vermindert ook de noodzaak om zelf datatypes te
moeten converteren. Nadeel dan weer is dat het niet mogelijk om is
alle ADSI-attributen van een object af te lopen, onafhankelijk van
de klasse van het object: de mogelijke ADSI-attributen van een
object van een specifieke klasse moeten <em>hard-gecodeerd</em> in
het script worden opgenomen. Je kan de ADSI-attribuutnamen enkel
opzoeken in de <nobr><strong>Library's</strong></nobr>.
<p>Het gedrag van ADSI-attributen is weinig consequent:</p>
<ul>
<li>sommige multi-valued LDAP-attributen hebben een overeenkomstig
ADSI-attribuut met een array als waarde, anderen leveren een
geconcatineerde string op</li>
<li>sommige attributen die niet ingesteld zijn, geven een
<em>Empty</em> waarde terug, terwijl anderen een
<em>E_ADS_PROPERTY_NOT_FOUND</em> (0x8000500D) fout genereren.</li>
</ul>
<p><a class="popout" href="p6/19.pl">voorbeeld</a></p>
</dd>
<dt>20.</dt>
<dd>Zoals je in het overzicht bij <em><nobr>ADSI Service
Providers</nobr></em> / <nobr><em>ADSI LDAP Provider</em></nobr> /
<nobr><em>LDAP User Object</em></nobr> / <nobr><em><nobr>Mapping
between IADsUser Properties and Active Directory
Properties</nobr></em> kan terugvinden komen de ADSI-attributen
<em>AccountDisabled</em>, <em>PasswordRequired</em> overeen met elk
éen bit van het LDAP-attribuut <em>UserAccountControl</em>.<br>
Je kan de numerieke waarde van de constanten
<strong>ADS_UF_ACCOUNTDISABLE</strong> en
<strong>ADS_UF_PASSWD_NOTREQD</strong>opzoeken in de <strong>ADSI
Library</strong>, in de <strong>ADS_USER_FLAG</strong> "enumeration
container" die je vindt in de tak <em>ADSI Enumerations</em>.<br>
Deze constanten zitten echter ook in de Type Library <strong>Active
DS Type Library</strong>.<br>
Bepaal met een script de numerieke waarden van alle constanten
waarvan je een substring voor de <em>key</em> als argument
meegeeft. Indien je geen argument opgeeft, dan moeten alle
constanten getoond worden. Zoek bijvoorbeeld alle constanten die de
substring <strong>_UF_</strong> bevaten.</nobr>
<p><a class="popout" href="p6/20.pl">antwoord</a></p>
</dd>
<dt>21.</dt>
<dd>Verifieer, door de gebruikers in de CN=Users container af te
lopen, dat de ADSI-attributen <strong>AccountDisabled,
PasswordRequired</strong> bepaald worden door een bit van het
LDAP-attribuut <strong>UserAccountControl</strong>, respectievelijk
aangegeven door de constanten
<strong>ADS_UF_ACCOUNTDISABLE</strong> en
<strong>ADS_UF_PASSWD_NOTREQD</strong>.
<p><a class="popout" href="p6/21.pl">antwoord</a></p>
</dd>
</dl>
<h5>Raadplegen (en wijzigen) van AD-objecten via
LDAP-attributen</h5>
Het opvragen van <strong>LDAP-attributen</strong> met de
<strong>-&gt;{&nbsp;&nbsp; }</strong> -notatie kan wel problemen
opleveren, zoals vermeld in oefening 13 (het attribuut
<em>defaultNamingContext</em> van het RootDSE object). We gaan nu
de problematiek bespreken die dit verklaart.
<h5>De Property Cache</h5>
Een ADSI programma heeft geen directe toegang tot een specifiek
AD&nbsp;object, maar laadt telkens een <strong>lokale
kopie</strong> ervan in de geheugenruimte van de cliënt, de
<a class="popout" href="p6/adp0603.gif">property cache</a> van
het object genoemd. Dit wordt ook toegelicht in de <strong>ADSI
Library</strong> in de sectie <em><nobr>About Active Directory
Service Interfaces</nobr> / <nobr>ADSI Properties and
Attributes</nobr> / <nobr>The ADSI Attribute Cache</nobr></em>
<p>De property cache bevat informatie over een aantal attributen,
hun naam, syntax en waarde(n). Eén van de voordelen hiervan is dat
bij opvragen van een eerste attribuut van een object, meteen ook
alle andere expliciet ingestelde ADSI- en LDAP-attributen gecached
worden. Dit <strong>vermindert de netwerkbelasting</strong> bij
volgende raadplegingen. Wanneer een toepassing immers een ADSI of
LDAP-attribuut opvraagt, wordt eerst in de property cache van het
object gekeken of de informatie reeds aanwezig is. Nadeliger is dan
weer dat wijzigingen in de lokale kopie niet automatisch worden
weggeschreven op de domeincontroller, tenzij men hiertoe expliciet
het initiatief neemt.</p>
<p>Zoek in de <strong>ADSI Library</strong> de zeven ADSI methodes
van de <em>IADs</em> interface die de communicatie regelen tussen
programmavariabelen en de property cache enerzijds (zie §22 en
§24), en tussen de property cache en Active Directory
anderzijds.<br>
De property cache van een specifiek object kan op drie manieren
vanuit Active Directory ingevuld worden:</p>
<ul>
<li><strong>expliciet</strong> oproepen van de methode
<strong>GetInfo()</strong> resulteert in het invullen of opfrissen
van de property cache met alle expliciet ingestelde LDAP-attributen
(dus niet-geconstrueerde attributen) van het AD&nbsp;object. Een
Active Directory cliënt frist nooit op eigen initiatief de property
cache op, en wordt ook niet verwittigd indien een andere cliënt het
corresponderend Active Directory object zou wijzigen. (zie
§22)</li>
<li><strong>expliciet</strong> oproepen van de methode
<strong>GetInfoEx()</strong> haalt enkel die LDAP-attributen (ook
geconstrueerde attributen) van het object op, waarvan de naam in de
parameterlijst van de methode is opgenomen. Indien men enkel in
bepaalde attributen geïnteresseerd is, dan kan dit een significante
performantieverbetering betekenen. Het oproepen van GetInfoEx()
vereist twee parameters: de eerste parameter groepeert de
attributen in een array (waarvan een referentie moet opgegeven
worden), terwijl de tweede parameter verplicht op 0 ingesteld moet
worden:
<p style="text-align: center"></p>
<table>
<tr>
<td width="5%">&nbsp;</td>
<td>
<em>$object</em>-&gt;GetInfoEx([<em>attribuut<sub>1</sub></em>,...,<em>attribuut<sub>n</sub></em>],0);</td>
</tr>
<tr>
<td width="5%">of</td>
<td><em>$object</em>-&gt;GetInfoEx(\@attribuut_array,0);</td>
</tr>
</table>
</li>
<li>bij het uitvoeren van de methodes <strong>Get()</strong> of
<strong>GetEx()</strong> (zie §23) wordt GetInfo
<strong>impliciet</strong> uitgevoerd, indien de property cache van
dat object op dat ogenblik nog leeg zou zijn.</li>
</ul>
Met de <strong>-&gt;{&nbsp;&nbsp; }</strong> -notatie (resp.
<strong>.&nbsp;</strong> -notatie) wordt GetInfo()
<strong>niet</strong> uitgevoerd, en dit geeft problemen indien de
property cache van dat object op dat ogenblik nog leeg is.
<p>De (gewijzigde) property cache van een element wordt enkel
teruggeschreven naar Active Directory door het expliciet aanroepen
van de methode <strong>SetInfo()</strong> - zie reeks8. Sommige
ADSI methods, zoals <strong>Delete()</strong> en
<strong>SetPassword()</strong>, omzeilen de property cache. Na
gebruik ervan hoef je bijgevolg SetInfo() niet aan te spreken.</p>
<dl class="compact">
<dt>22.</dt>
<dd>Herneem oefening 13, en doe de nodige aanpassingen zodat je het
attribuut <code>DnsHostName</code> niet meer moet aanroepen. Het
<strong>RootDSE</strong> object heeft dus ook een Property Cache,
ook al is er geen AD&nbsp;object dat ermee overeenkomt.
<p><a class="popout" href="p6/22.pl">antwoord</a></p>
</dd>
</dl>
<h5>Raadplegen (en wijzigen) van objecten via LDAP-attributen</h5>
De <strong>IADs interface</strong>, die voor elk ADSI object
beschikbaar is, implementeert de methodes <strong>Get()</strong> ,
<strong>GetEx()</strong>, <strong>Put()</strong> en
<strong>PutEx()</strong>. Met deze methodes kan je <strong>om het
even welk LDAP-attribuut</strong> van het overeenkomstig AD object
manipuleren. De eerste twee methodes dienen om gegevens te
raadplegen, de laatste twee worden gebruikt om gegevens te
wijzigen. Dit laatste zullen we maar in de laatste reeks zelf
uitproberen.
<p>In de vorige oefeningen hebben we LDAP-attributen opgevraagd
zonder gebruik te maken van <strong>Get()/GetEx()</strong>. In
<em>PerlScript</em> beschik je immers over de mogelijkheid om het
<em>LDAP-attribuut</em> op te halen als "<em>attribuut</em>" van
een object. Hierbij doet ADSI <strong>dynamisch en
impliciet</strong> een beroep op een Get methode. Dit lukt niet
altijd met andere scripttalen, zodat je dan wel
<strong>Get()</strong> consequent moet gebruiken. De syntaxen</p>
<p style="text-align: center"></p>
<table border="1" align="center">
<tr>
<td width="25%">als attribuut</td>
<td>
<em>$object</em><strong>-&gt;</strong>{<em>LDAPattribuut</em>}</td>
<td>
<em>$object</em><strong>-&gt;</strong>{<em>"LDAPattribuut"</em>}</td>
</tr>
<tr>
<td>met <strong>Get()</strong></td>
<td colspan="2" align="center">
<em>$object</em><strong>-&gt;Get(</strong><em>"LDAPattribuut"</em><strong>)</strong></td>
</tr>
</table>
zijn dan ook equivalent, op een paar <em>details</em> na:
<ul>
<li>met <strong>Get()</strong> wordt consequent een fout opgeworpen
indien het LDAP-attribuut niet is ingesteld. De bijhorende error is
<strong>E_ADS_PROPERTY_NOT_FOUND</strong>.</li>
<li>bij uitvoeren van de <strong>Get()</strong> of <strong>GetEx()
methods</strong> wordt GetInfo() <strong>impliciet</strong>
uitgevoerd, indien de property cache van het object op dat ogenblik
nog leeg zou zijn.</li>
<li>de <strong>Get()</strong> methode zal impliciet steeds de
waarde ophalen, ook voor meer <em>gecompliceerde</em>
LDAP-attibuten (zie opmerking in §&nbsp;13,16,18).</li>
</ul>
<p><strong>Get()</strong> en <strong>Put()</strong> zijn eerder
bedoeld om met <strong>single-valued</strong> waarden te werken:
indien een attribuut multi-valued is, maar slechts één enkele
waarde bevat, dan levert <strong>Get()</strong> een enkelvoudige
variabele op, terwijl als het attribuut meerdere waarden bevat,
<strong>Get()</strong> een referentie naar een array teruggeeft.
Het is wat lastig om dit in een programma op te vangen.
<strong>GetEx()</strong> daarentegen is eerder bedoeld om met
<strong>multi-valued</strong> attributen te werken, maar kan ook
uitstekend met single-valued attributen om: in alle gevallen levert
<strong>GetEx()</strong> immers een referentie naar een array van
waarden, ook al is het attribuut single-valued, of is het
multi-valued met slechts één enkele waarde.</p>
<p>We bespreken ook de bijzonderheden van <strong>PutEx()</strong>,
die pas later in de oefeningen aan bod zal komen. Deze methode
vereist steeds drie parameters :</p>
<table border="1" align="center">
<tr>
<td><em>mode</em></td>
<td>geheel getal : beschrijft de actie (<em>wissen, vervangen,
toevoegen,verwijderen</em>)</td>
</tr>
<tr>
<td><em>LDAPattribuut</em></td>
<td>de naam van het te wijzigen attribuut</td>
</tr>
<tr>
<td><em>values</em></td>
<td>een referentie naar een <strong>Array</strong> met waarden (let
op de syntax !)</td>
</tr>
</table>
<p>De <em>mode</em> wordt met behulp van constanten beschreven
:</p>
<table border="1" width="90%">
<tr>
<td>ADS_PROPERTY_CLEAR<br></td>
<td>(=1)<br></td>
<td>Verwijdert alle waarden van een multi-valued attribuut.</td>
</tr>
<tr>
<td>ADS_PROPERTY_UPDATE<br></td>
<td>(=2)<br></td>
<td>Vervangt alle waarden van een single- of multi-valued attribuut
door de opgegeven waarden.</td>
</tr>
<tr>
<td>ADS_PROPERTY_APPEND<br></td>
<td>(=3)<br></td>
<td>Vult de waarden van een multi-valued attribuut aan met de
opgegeven waarden. Eventuele duplicaten worden automatisch
verwijderd.</td>
</tr>
<tr>
<td>ADS_PROPERTY_DELETE<br></td>
<td>(=4)<br></td>
<td>Verwijdert de opgegeven waarden van een multi-valued
attribuut.</td>
</tr>
</table>
<p>Je kan deze constanten <em>hard-coderen</em> in je scripts, maar
je gebruikt beter de Type Library. Ga na met oefening 20 dat deze
constanten opgeslagen zijn in de <strong>Active DS Type
Library</strong><br>
De Put() method is equivalent met PutEx() in update mode.<br>
Let op bij de parameter <em>values</em>. Voor single-valued
attributen moet één waarde opgegeven worden, voor multi-valued
attributen mag steeds een referentie naar een array gebruikt
worden, ook al is er slechts één enkele waarde.</p>
<p><strong>Let op !!</strong> De wijzigingen veroorzaakt door de
Put()/PutEx() methods worden pas na het expliciet oproepen van de
<strong>SetInfo()</strong> method effectief opgeslagen in Active
Directory. Om performantieredenen kan je best pas SetInfo()
oproepen nadat een volledige reeks attribuutwijzigingen is
aangebracht. Enkel de gewijzigde attributen worden naar de
domeincontroller opgestuurd.</p>
<dl class="compact">
<dt>23.</dt>
<dd>Herneem vorige oefening, maar gebruik de methode
<strong>get()</strong>, nu kan je de aanroep
<strong>getInfo()</strong> weglaten.<br>
Vraag van een AD-object naar keuze de waarde van het geconstrueerde
LDAP-attribuut <strong>canonicalName</strong>. Welke fout krijg je
indien je dit attribuut niet expliciet inlaadt in de Property
Cache?<br>
Merk op dat geconstrueerde attributen niet getoond worden in
<strong>AdsiEdit</strong>.
<p><a class="popout" href="p6/23.pl">antwoord</a></p>
</dd>
<dt>24.</dt>
<dd>Het onderstaand voorbeeld toont voor het user-object (met DN
"CN=Administrator,CN=Users,DC=iii,DC=hogent,DC=be") de inhoud van
een LDAP-attribuut dat als argument wordt meegegeven met het
script. Het maakt uitsluitend gebruik van GetEx() zodat de waarde
steeds als arrayreferentie kan worden opgevangen. Kijk ondermeer
wat er gebeurt met de LDAP-attributen :
<strong>cn,allowedAttributes, mail, canonicalName,
objectClass</strong>.
<p>Indien een LDAP-attribuut niet is ingesteld, dan genereert
<strong>GetEx()</strong> steeds een
<em>E_ADS_PROPERTY_NOT_FOUND</em> (0x8000500D) fout. Deze
constanten zitten niet in de Type Library en moet je dus
hardcoderen. In de <strong>ADSI Library</strong> vind je deze
constanten in de tak <em><nobr>ADSI Error Codes</nobr></em> /
<em><nobr>Generic ADSI Error Codes</nobr></em>. Zorg ervoor dat het
script niet stopt als deze fout optreedt!!<br>
Aangezien een geconstrueerd attribuut niet automatisch in de
property cache geplaatst wordt, is het mogelijk dat een attribuut
wel is ingesteld, maar toch ontbreekt in de property cache (ook al
is die voor andere attributen wel opgevuld), zie vorige oefening.
Daarom wordt in het voorbeeldscript na een
<em>E_ADS_PROPERTY_NOT_FOUND</em> fout een tweede poging ondernomen
om het attribuut te achterhalen, nu na expliciet oproepen van de
<strong>GetInfoEx()</strong> method voor dat attribuut.</p>
<p>Omdat de return-waarden van LDAP-attributen van heel verscheiden
types zijn (bijvoorbeeld VT_DATE), kan je deze beter laten
converteren naar strings of numerieke waarden. Dit gebeurt
automatisch indien je vooraf een extra Perl module toevoegt:
<strong>use Win32::OLE::Variant;</strong> Probeer dit uit met het
LDAP-attribuut <strong>whenChanged</strong>.</p>
<p><a class="popout" href="p6/24.pl">voorbeeld</a></p>
</dd>
<dt>25.</dt>
<dd>Pas het voorbeeld aan zodat de waarde getoond wordt van alle
LDAP-attributen van dit object. De lijst van LDAP-attributen voor
een user die je met deze methode kan raadplegen is :
<table width="90%" border="1">
<tr>
<td>accountNameHistory</td>
<td>aCSPolicyName</td>
<td>adminCount</td>
<td>adminDescription</td>
<td>adminDisplayName</td>
</tr>
<tr>
<td>allowedAttributes</td>
<td>allowedAttributesEffective</td>
<td>allowedChildClasses</td>
<td>allowedChildClassesEffective</td>
<td>altSecurityIdentities</td>
</tr>
<tr>
<td>assistant</td>
<td>badPwdCount</td>
<td>bridgeheadServerListBL</td>
<td>c</td>
<td>canonicalName</td>
</tr>
<tr>
<td>cn</td>
<td>co</td>
<td>codePage</td>
<td>comment</td>
<td>company</td>
</tr>
<tr>
<td>countryCode</td>
<td>createTimeStamp</td>
<td>defaultClassStore</td>
<td>department</td>
<td>description</td>
</tr>
<tr>
<td>desktopProfile</td>
<td>destinationIndicator</td>
<td>directReports</td>
<td>displayName</td>
<td>displayNamePrintable</td>
</tr>
<tr>
<td>distinguishedName</td>
<td>division</td>
<td>dSCorePropagationData</td>
<td>dynamicLDAPServer</td>
<td>employeeID</td>
</tr>
<tr>
<td>extensionName</td>
<td>facsimileTelephoneNumber</td>
<td>flags</td>
<td>fromEntry</td>
<td>frsComputerReferenceBL</td>
</tr>
<tr>
<td>fRSMemberReferenceBL</td>
<td>fSMORoleOwner</td>
<td>garbageCollPeriod</td>
<td>generationQualifier</td>
<td>givenName</td>
</tr>
<tr>
<td>groupPriority</td>
<td>groupsToIgnore</td>
<td>homeDirectory</td>
<td>homeDrive</td>
<td>homePhone</td>
</tr>
<tr>
<td>homePostalAddress</td>
<td>info</td>
<td>initials</td>
<td>instanceType</td>
<td>internationalISDNNumber</td>
</tr>
<tr>
<td>ipPhone</td>
<td>isCriticalSystemObject</td>
<td>isDeleted</td>
<td>isPrivilegeHolder</td>
<td>l</td>
</tr>
<tr>
<td>lastKnownParent</td>
<td>legacyExchangeDN</td>
<td>localeID</td>
<td>logonCount</td>
<td>mail</td>
</tr>
<tr>
<td>managedObjects</td>
<td>manager</td>
<td>masteredBy</td>
<td>memberOf</td>
<td>mhsORAddress</td>
</tr>
<tr>
<td>middleName</td>
<td>mobile</td>
<td>modifyTimeStamp</td>
<td>mS-DS-ConsistencyChildCount</td>
<td>msNPAllowDialin</td>
</tr>
<tr>
<td>msNPCallingStationID</td>
<td>msNPSavedCallingStationID</td>
<td>msRADIUSCallbackNumber</td>
<td>msRADIUSFramedIPAddress</td>
<td>msRADIUSFramedRoute</td>
</tr>
<tr>
<td>msRADIUSServiceType</td>
<td>msRASSavedCallbackNumber</td>
<td>msRASSavedFramedIPAddress</td>
<td>msRASSavedFramedRoute</td>
<td>name</td>
</tr>
<tr>
<td>netbootSCPBL</td>
<td>networkAddress</td>
<td>nonSecurityMemberBL</td>
<td>o</td>
<td>objectCategory</td>
</tr>
<tr>
<td>objectClass</td>
<td>objectVersion</td>
<td>operatorCount</td>
<td>otherFacsimileTelephoneNumber</td>
<td>otherHomePhone</td>
</tr>
<tr>
<td>otherIpPhone</td>
<td>otherLoginWorkstations</td>
<td>otherMailbox</td>
<td>otherMobile</td>
<td>otherPager</td>
</tr>
<tr>
<td>otherTelephone</td>
<td>otherWellKnownObjects</td>
<td>ou</td>
<td>pager</td>
<td>personalTitle</td>
</tr>
<tr>
<td>physicalDeliveryOfficeName</td>
<td>postalAddress</td>
<td>postalCode</td>
<td>postOfficeBox</td>
<td>preferredDeliveryMethod</td>
</tr>
<tr>
<td>preferredOU</td>
<td>primaryGroupID</td>
<td>primaryInternationalISDNNumber</td>
<td>primaryTelexNumber</td>
<td>profilePath</td>
</tr>
<tr>
<td>proxiedObjectName</td>
<td>proxyAddresses</td>
<td>queryPolicyBL</td>
<td>revision</td>
<td>rid</td>
</tr>
<tr>
<td>sAMAccountName</td>
<td>sAMAccountType</td>
<td>scriptPath</td>
<td>sDRightsEffective</td>
<td>seeAlso</td>
</tr>
<tr>
<td>serverReferenceBL</td>
<td>servicePrincipalName</td>
<td>showInAddressBook</td>
<td>showInAdvancedViewOnly</td>
<td>siteObjectBL</td>
</tr>
<tr>
<td>sn</td>
<td>st</td>
<td>street</td>
<td>streetAddress</td>
<td>subRefs</td>
</tr>
<tr>
<td>subSchemaSubEntry</td>
<td>systemFlags</td>
<td>telephoneNumber</td>
<td>textEncodedORAddress</td>
<td>title</td>
</tr>
<tr>
<td>url</td>
<td>userAccountControl</td>
<td>userParameters</td>
<td>userPrincipalName</td>
<td>userSharedFolder</td>
</tr>
<tr>
<td>userSharedFolderOther</td>
<td>userWorkstations</td>
<td>USNIntersite</td>
<td>wbemPath</td>
<td>wellKnownObjects</td>
</tr>
<tr>
<td>whenChanged</td>
<td>whenCreated</td>
<td>wWWHomePage</td>
<td>x121Address</td>
</tr>
</table>
<p>Deze lijst moet je <em>hard-coderen</em>. Verder in dit
hoofdstuk (§38) gebruiken we het <strong>abstracte schema</strong>
van het <em>klasseobject</em> dat hoort bij een AD-object, om de
lijst met alle LDAP-attributen dynamisch op te vragen. In §27
gebruiken we de <strong>ADSI Property Cache Interfaces</strong> om
dit probleem op te lossen.</p>
<p><strong>Opmerking:</strong> er zijn LDAP-attributen met een
speciale syntax die je met deze methode - voorlopig - niet kan
uitschrijven. Het betreft o.a. de attributen :</p>
<table width="90%" border="1">
<tr>
<td>uSNCreated</td>
<td>uSNChanged</td>
<td>objectGUID</td>
<td>badPasswordTime</td>
<td>lastLogoff</td>
</tr>
<tr>
<td>lastLogon</td>
<td>logonHours</td>
<td>pwdLastSet</td>
<td>objectSid</td>
<td>accountExpires</td>
</tr>
<tr>
<td>lockoutTime</td>
<td>lastLogonTimestamp</td>
<td>nTSecurityDescriptor</td>
</tr>
</table>
<p><a class="popout" href="p6/25.pl">antwoord</a></p>
</dd>
<dt>26.</dt>
<dd>Geef een overzicht van alle subcontainers in de container
<strong>/iii.hogent.be/iii/studenten</strong>, en (een benadering
voor) het aantal kindobjecten in elk van deze subcontainers. Dit
lukt niet met "Count". Het is ook niet de bedoeling dat je zelf het
aantal kindobjecten "telt". Zoek het LDAP-attribuut op dat een
benadering bevat hiervoor.
<p><a class="popout" href="p6/26.pl">antwoord</a></p>
</dd>
</dl>
<h5><a name="IADSProp">Raadplegen en wijzigen van objecten via de
ADSI Property Cache Interfaces</a></h5>
Een derde alternatief om LDAP-attributen aan te spreken is het
rechtstreeks manipuleren van de property cache. Hiervoor gebruik je
vier <a class="popout" href="p6/adp0703.gif">Property Cache
Interfaces</a>, die beschreven worden in de tak <em><nobr>ADSI
Interfaces</nobr> / <nobr>Property Cache Interfaces</nobr></em> van
de <strong>ADSI Library</strong>.
<ul>
<li>De <strong>IADsPropertyList</strong> interface biedt ondermeer
de mogelijkheid om elk <strong>ADSI object</strong>, te beschouwen
als een soort collection van objecten van LDAP-attributen, in deze
context <strong>PropertyEntry objecten</strong> genoemd. Met het
attribuut <strong>PropertyCount</strong> kan je het aantal
attributen opvragen dat de property cache bevat.</li>
</ul>
<dl class="compact">
<dt>27.</dt>
<dd>Verklaar in onderstaand voorbeeld het aantal properties in de
Property Cache.
<p><a class="popout" href="p6/27.pl">voorbeeld</a></p>
</dd>
</dl>
Om de PropertyEntry objecten te overlopen kan je geen gebruik maken
van een foreach-lus. Je moet gebruik maken van de methodes
<strong>Item((<em>...</em>))</strong> en <strong>Next()</strong>.
De parameter van de methode <strong>Item</strong> is de
<em>Ldapdisplayname</em>, of een <em>numerieke index</em>
<table border="0">
<tr>
<td width="5%">&nbsp;</td>
<td>
<strong>Item("</strong><em>LDAPattribuut</em><strong>")</strong></td>
<td width="5%">of</td>
<td><strong>Item(</strong><em>nummer</em><strong>)</strong></td>
</tr>
</table>
De numerieke indexering start vanaf&nbsp;0 en kan wel eens voor
problemen zorgen in Perlscript.<br>
PropertyEntry objecten bestaan enkel in de geheugenruimte van de
cliënt. Om attributen te wijzigen of toe te voegen (zie laatste
reeks), kun je methodes gebruiken zoals
<strong>PutPropertyItem()</strong>,
<strong>ResetPropertyItem()</strong> en
<strong>PurgePropertyList()</strong>.
<p>Om meer informatie op te vragen van een PropertyEntry object
gebruik je</p>
<ul>
<li>de <strong>IADsPropertyEntry</strong> interface, deze
ondersteunt drie attributen:
<ul>
<li>het <strong>Name</strong> attribuut, dat de ldapDisplayname van
het attribuut weergeeft (vooral handig bij numerieke
indexering),</li>
<li>het <strong>ADsType</strong> attribuut, dat de <em>ADSI
syntax</em> bevat. Elke LDAP syntax (geïdentificeerd door hun X.500
object ID) wordt immers gemapt (zie tabel) op een specifiek ADSI
syntax.
<table border="1" width="80%">
<tr>
<td>ADSTYPE_DN_STRING<br></td>
<td>(=1)<br></td>
<td>2.5.5.1</td>
</tr>
<tr>
<td>ADSTYPE_CASE_EXACT_STRING<br></td>
<td>(=2)<br></td>
<td>2.5.5.3</td>
</tr>
<tr>
<td rowspan="7">ADSTYPE_CASE_IGNORE_STRING<br></td>
<td rowspan="7">(=3)<br></td>
<td>2.5.5.2</td>
</tr>
<tr>
<td>2.5.5.4</td>
</tr>
<tr>
<td>2.5.5.5</td>
</tr>
<tr>
<td>2.5.5.7</td>
</tr>
<tr>
<td>2.5.5.12</td>
</tr>
<tr>
<td>2.5.5.13</td>
</tr>
<tr>
<td>2.5.5.14</td>
</tr>
<tr>
<td>ADSTYPE_PRINTABLE_STRING<br></td>
<td>(=4)<br></td>
<td>2.5.5.5</td>
</tr>
<tr>
<td>ADSTYPE_NUMERIC_STRING<br></td>
<td>(=5)<br></td>
<td>2.5.5.6</td>
</tr>
<tr>
<td>ADSTYPE_BOOLEAN<br></td>
<td>(=6)<br></td>
<td>2.5.5.8</td>
</tr>
<tr>
<td>ADSTYPE_INTEGER<br></td>
<td>(=7)<br></td>
<td>2.5.5.9</td>
</tr>
<tr>
<td rowspan="2">ADSTYPE_OCTET_STRING<br></td>
<td rowspan="2">(=8)<br></td>
<td>2.5.5.10</td>
</tr>
<tr>
<td>2.5.5.17</td>
</tr>
<tr>
<td>ADSTYPE_UTC_TIME<br></td>
<td>(=9)<br></td>
<td>2.5.5.11</td>
</tr>
<tr>
<td>ADSTYPE_LARGE_INTEGER<br></td>
<td>(=10)<br></td>
<td>2.5.5.16</td>
</tr>
<tr>
<td>ADSTYPE_NT_SECURITY_DESCRIPTOR<br></td>
<td>(=25)<br></td>
<td>2.5.5.15</td>
</tr>
<tr>
<td>ADSTYPE_DN_WITH_BINARY<br></td>
<td>(=27)<br></td>
<td>2.5.5.7</td>
</tr>
<tr>
<td>ADSTYPE_DN_WITH_STRING<br></td>
<td>(=28)<br></td>
<td>2.5.5.14</td>
</tr>
</table>
Opnieuw kan je deze constanten <em>hard-coderen</em> in je scripts,
of ernaar verwijzen via de Active DS Type Library.<br>
De ADSI syntaxen 8,10 of 25 zijn complexe syntaxen, waarbij je de
inhoud van het LDAP-attribuut niet zomaar kan uitschrijven. Maar
omdat je nu de mogelijkheid hebt op de syntax op te vragen, kan je
toch een zinvolle waarde uitschrijven :
<table border="1" align="center">
<tr>
<td>ADSTYPE_OCTET_STRING (8)</td>
<td>string als bit-string interpreteren</td>
</tr>
<tr>
<td>ADSTYPE_LARGE_INTEGER (10)</td>
<td>gebruik de ADSI-attributen <em>HighPart, LowPart</em> uit de
Interface <strong>IADsLargeInteger</strong></td>
</tr>
<tr>
<td>ADSTYPE_NT_SECURITY_DESCRIPTOR (25)</td>
<td>geef voor dit object de waarde van het ADSI-attribuut
<em>Owner</em> uit de Interface
<strong>IADsSecurityDescriptor</strong></td>
</tr>
</table>
</li>
<li>het <strong>Values</strong> attribuut tenslotte levert een
collection object op met als elementen <strong>PropertyValue
objecten</strong>, die elk corresponderen met de individuele
waarden van een single- of multi-valued LDAP-attribuut.</li>
</ul>
</li>
<li>De <strong>IADsPropertyValue2</strong> en
<strong>IADsPropertyValue</strong> interfaces laten bewerkingen toe
op een <strong>PropertyValue object</strong>. Elke individuele
waarde kan aangesproken en gewijzigd worden met behulp van de
<strong>GetObjectProperty()</strong> en
<strong>PutObjectProperty()</strong> methods van de
<strong>IADsPropertyValue2</strong> interface. Beiden vereisen de
ADSI syntax als numeriek argument. Als alternatief (minder handig)
implementeert de <strong>IADsPropertyValue</strong> interface
behalve de <strong>Clear() method</strong> ook attributen die
toegang geven tot waarden van een bepaalde ADSI syntax (voor elke
ADSI syntax is er een overeenkomstig attribuut).</li>
</ul>
<dl class="compact">
<dt>28.</dt>
<dd>Deze werkwijze om LDAP-Attributen op te halen lijkt op het
eerste zich de moeilijkste van de drie alternatieven. Het
onderstaand voorbeeld toont echter aan dat de oplossing eerder
vereenvoudigd wordt: men moet zich ondermeer niet bekommeren om
attributen die niet zouden zijn ingesteld. De property cache bevat
immers <strong>enkel ingestelde attributen</strong>. Het expliciet
aanroepen van de GetInfo() method is hier wel noodzakelijk.
Aangezien geconstrueerde attributen (vb. canonicalName) niet
expliciet worden opgehaald, komen ze niet voor in het overzicht.
<p><a class="popout" href="p6/28.pl">voorbeeld</a></p>
</dd>
<dt>29.</dt>
<dd>Geef als eerste argument een <em>usernaam</em> en als tweede
argument een (mogelijk geconstrueerd) <em>LDAP-attribuut</em>. Ga
na of de <em>usernaam</em> voorkomt in de containers
<em>iii.hogent.be/iii/studenten/EM7INF</em> of
<em>iii.hogent.be/iii/docenten</em>. Indien de <em>user</em>
gevonden wordt, probeer dan te achterhalen of het meegegeven
<em>LDAP-Attribuut</em> ingesteld is (in de propertyCache
voorkomt), en zo ja, schrijf de inhoud uit naar het scherm. Los dit
probleem op met behulp van de Property Cache Interfaces.
<p><a class="popout" href="p6/29.pl">antwoord</a></p>
</dd>
<dt>30.</dt>
<dd>Tot slot pas je oplossing van de vorige oefening aan zodat je
de <strong>Property Cache Interfaces</strong> niet meer wordt
gebruikt. Je moet dus <strong>Getex()</strong> gebruiken. Omdat
deze methode een fout opwerpt indien een LDAP-attribuut niet is
ingesteld, moet je hierop testen.<br>
Zoals reeds eerder aangehaald (zie &amp;sect. 24) ken je het type
van de inhoud niet (tenzij je het schema zou raadplegen), en is het
nu niet mogelijk om de inhoud van een willekeurig LDAP-attribuut
uit te schrijven.
<p><a class="popout" href="p6/30.pl">antwoord</a></p>
</dd>
</dl>
<h4><a name="ReeelSch">Raadplegen van het reële schema</a></h4>
Het schema van Active Directory wordt in Active Directory zelf
opgeslagen in een aparte partitie, de <em>schema partitie</em>. In
§17 werd de <strong>distinguishedName</strong> van deze <em>schema
partitie</em> opgehaald met het <strong>RootDSE</strong> object
(serverless binding).<br>
Indien men de schema partitie en zijn objecten rechtstreeks
aanspreekt, noemt men dit manipulatie van het <strong>reële
schema</strong>. Vanaf §36 worden de <em>ADSI Interface</em>s
besproken om deze objecten alternatief te manipuleren, daarbij
wordt de term <strong>abstract schema</strong> gehanteerd. Je kan
deze interfaces NIET toepassen op het reële schema.
<p>Om het reële schema te <strong>raadplegen</strong> en eventueel
ook te <strong>wijzigen</strong> kan je gebruik maken van volgende
principes die we hiervoor reeds besproken hebben:</p>
<ul>
<li>In <strong>AdsiEdit</strong> kan je de AD-schemaobjecten
(classSchema ,attributeSchema) van het reële schema bekijken. Voor
elk AD-schemaobject kan je de LDAP-attributen opvragen.</li>
<li>In de <strong>AD Library</strong> vind je ook de beschrijving
van alle klassen en LDAP-attributen van het reële schema in de tak
<nobr><em>Active Directory Schema</em></nobr> .</li>
<li>Met een script kan je <em>binden</em> aan de schema partitie en
van daaruit de classSchema en attributeSchema objecten aanspreken
zoals elk ander AD object.</li>
</ul>
<p>Alhoewel de scriptomgeving zich uitstekend leent tot het
<strong>uitbreiden en wijzigen</strong> van het schema, gaan we ons
daaraan in deze labosessies niet wagen. Eén enkele verkeerde
manipulatie zou immers het volledige labonetwerk buiten werking
kunnen stellen. De domein controller die in <em>iii.hogent.be</em>
de rol van <strong>schema master</strong> vervult,
<strong>astaroth</strong>, is dan ook niet <em>extern</em>
toegankelijk. We beperken ons tot het raadplegen van het reële
schema. Dit is een uitstekend middel om:</p>
<ul>
<li>te experimenteren met de aangeleerde technieken van deze
reeks</li>
<li>de vrij abstracte begrippen van §2.2.5-§2.2.6 in de
theoriecursus in praktijk te toetsen.</li>
</ul>
<dl class="compact">
<dt>31.</dt>
<dd>&nbsp;<strong><em>Inhoud van het reëel schema</em></strong>
<p>In de schema partitie is geen vertakking in containers, waardoor
het eenvoudig is om alle objecten te overlopen. Bepaal met een
script welke soort objecten het reëel schema bevat en tel het
aantal objecten van elke soort.</p>
<p><a class="popout" href="p6/31.pl">antwoord</a></p>
</dd>
</dl>
In de vorige oefening merk je op dat het reële schema hoofdzakelijk
twee soorten AD-objecten bevat:
<ul>
<li><strong>classSchema</strong> objecten: één voor elke klasse die
beschikbaar is,</li>
<li><strong>attributeSchema</strong> objecten: één voor elk
LDAP-attribuut.</li>
</ul>
Het <strong>subSchema</strong> laten we voorlopig buiten
beschouwing.<br>
In de theorie-cursus werden de belangrijkste LDAP-attributen van
<em>klassen</em> en <em>LDAP-attributen</em> besproken. In de
<strong>AD Library</strong> kan je deze informatie voor de twee
soorten AD schemaobjecten terugvinden in de tak <nobr><em>Active
Directory Domain Services</em></nobr> &nbsp; / &nbsp;
<nobr><em>About Active Directory Domain Services</em></nobr> &nbsp;
/ &nbsp; <nobr><em>Active Directory Schema</em></nobr>:
<ul>
<li>de <em>Characteristics of Object Classes</em> geven meer
informatie over een <strong>klasseSchema</strong>,</li>
<li>de <em>Characteristics of Attributes</em> verduidelijken de
mogelijkheden van een <strong>attribuutSchema</strong>.</li>
</ul>
<dl class="compact">
<dt>32.</dt>
<dd>&nbsp;<strong><em>Opzoeken van klassen met specifieke
eigenschappen</em></strong>
<p>Zoek in je theorie-cursus (of in eerste van bovenstaande takken)
welke LDAP-attributen elk van volgende eigenschappen
beschrijven:</p>
<ul>
<li>de klasse is een onmiddellijk afgeleid van de klasse
<strong>top</strong></li>
<li>de klasse is een <strong>hulpklasse</strong></li>
<li>de klasse kan attributen overnemen van één of meer
hulpklassen</li>
<li>de klasse is <strong>Microsoft specifiek</strong> (voor Active
Directory)</li>
<li>de klasse kan <strong>niet gewijzigd</strong> worden</li>
<li>de objecten van de klasse hebben een <strong>RDN</strong> die
niet van de vorm <strong>CN=...</strong> is</li>
</ul>
<p>Schrijf nu een script dat telt hoeveel klassen er zijn met elk
van bovenvermelde eigenschappen.</p>
<p><a class="popout" href="p6/32.pl">antwoord</a></p>
</dd>
<dt>33.</dt>
<dd>&nbsp;<strong><em>Opzoeken van LDAP-attributen met specifieke
eigenschappen</em></strong>
<p>Zoek in je theorie-cursus (of in de tweede hiervoor vermelde
tak) welke LDAP-attributen elk van volgende eigenschappen
beschrijven:</p>
<ul>
<li>het LDAP-attribuut is <strong>multi-valued</strong></li>
<li>het LDAP-attribuut wordt opgenomen in de <strong>Global
Catalog</strong></li>
<li>het LDAP-attribuut laat <strong>indexering</strong> toe</li>
<li>het LDAP-attribuut wordt <strong>niet gerepliceerd</strong>
tussen domeincontrollers</li>
<li>het LDAP-attribuut is <strong>geconstrueerd</strong> op basis
van andere attributen</li>
<li>het LDAP-attribuut heeft een <strong>ondergrens</strong> en/of
<strong>bovengrens</strong></li>
<li>het LDAP-attribuut is <strong>Microsoft specifiek</strong>
(voor Active Directory)</li>
<li>het LDAP-attribuut kan <strong>niet gewijzigd</strong>
worden</li>
</ul>
<p>Schrijf nu een script dat telt hoeveel attributen er zijn met
elk van bovenvermelde eigenschappen</p>
<p><a class="popout" href="p6/33.pl">antwoord</a></p>
</dd>
<dt>34.</dt>
<dd>Controleer met oefening §20 welke elf constanten uit de Type
Library informatie bevatten over "systemflag". Je vindt deze
constanten ook terug in de <strong>ADS_SYSTEMFLAG</strong>
"enumeration container" in de tak <em>ADSI Enumerations</em> van de
<strong>ADSI Library</strong>.<br>
Als je een LDAP-attribuut wilt opvragen en/of wijzigen dan is het
interessant om te weten of het attribuut geconstrueerd is, en of
het door de gebruiker kan gewijzigd worden. Geef de ldapDisplayName
van alle attributen die geconstrueerd zijn (gebruik hierbij de
constanten), gevolgd door een overzicht van alle attributen die
niet kunnen gewijzigd worden door een gebruiker. Overloop maar 1
keer alle attribuutschema objecten.
<p><a class="popout" href="p6/34.pl">antwoord</a></p>
</dd>
<dt>35.</dt>
<dd>&nbsp;<strong><em>Eigenschappen van een individueel schema
object</em></strong>
<p>Uiteraard kan je elk <strong>individueel schemaobject</strong>
rechtstreeks binden, en zijn LDAP-attributen ophalen. Een
belangrijk probleem hierbij is dat de distinguishedName van een
schemaobject de <strong>RDN</strong> van het schemaobject bevat, en
niet de <strong>ldapDisplayName</strong>.</p>
<p>Schrijf een script dat één argument vereist, de RDN naam van een
klasse of van een attribuut, en dat de waarde(n) van
<em>interessante</em> eigenschappen ervan uitschrijft. Gebruik een
array waarin je de eigenschappen die in §2.2.5-§2.2.6 van de
theoriecursus besproken werden <em>hard codeert</em>.</p>
<p><a class="popout" href="p6/35.pl">antwoord</a></p>
</dd>
</dl>
<h4>Raadplegen van het abstracte schema</h4>
Het reële schema bevat behalve classSchema en attributeSchema
objecten nog één ander object, behorend tot de klasse
<strong>subSchema</strong>, en met <strong>Aggregate</strong> als
RDN. Dit enkel object bevat een alternatieve representatie, het
<strong>abstracte schema</strong> genoemd, van het gehele schema.
Om dit abstract schema te raadplegen gaan we <strong>NIET
rechtstreeks</strong> <em>binden</em> aan dit Aggregate object -
dat is te complex. Raadpleeg de <strong>AD Library</strong> de tak
<nobr><em>Active Directory Domain Services</em></nobr> &nbsp; /
&nbsp; <nobr><em>About Active Directory Domain Services</em></nobr>
&nbsp; / &nbsp; <nobr><em>Active Directory Schema</em></nobr>
&nbsp; / &nbsp; <nobr><em>The Abstract Schema</em></nobr> voor meer
informatie over het abstracte schema.
<p>In plaats zullen we de ADSI interfaces gebruiken die het veel
eenvoudiger maken om het abstracte schema te lezen. Dankzij deze
ADSI interfaces stelt het abstracte schema op een eenvoudige manier
gegevens ter beschikking aan cliënts, zonder dat die zich verder om
veel implementatie details moeten bekommeren.</p>
<p>In een eerste stap moet je aan het abstracte schema
<em>binden</em> met een speciaal ADsPath, in de vorm</p>
<table border="0" width="100%">
<tr>
<td width="5%">&nbsp;</td>
<td>
<strong>LDAP://</strong>[<em>server</em>|<em>domein</em><strong>/</strong>]<strong>schema</strong></td>
</tr>
</table>
Dit resulteert in <strong>een container object</strong>, die alle
<em>abstracte schema-objecten</em> bevat.<br>
Dit lukt niet direct in PowerShell.
<dl class="compact">
<dt>36.</dt>
<dd>&nbsp;<strong><em>Inhoud van het abstract schema</em></strong>
<p>Net als in §31 kan je het abstract schema overlopen. Bepaal
welke soort objecten het abstract schema bevat en tel het aantal
objecten van elke soort.</p>
<p><a class="popout" href="p6/36.pl">antwoord</a></p>
</dd>
</dl>
Vergelijk de uitvoer van de vorige oefening, met oefening 30. Het
abstract schema bevat exact evenveel <em>abstacte</em>
<strong>attribuutschema en klasseschema objecten</strong>, maar het
bevat ook 35 <strong>syntax objecten</strong>.
<p>Je kan elk individueel abstract schema object <em>binden</em>,
met behulp van volgend eenvoudig ADsPath:</p>
<table border="0" width="100%">
<tr>
<td width="5%">&nbsp;</td>
<td>
<strong>LDAP://</strong>[<em>server</em>|<em>domein</em><strong>/</strong>]<strong>schema/</strong><em>ldapDisplayName</em></td>
</tr>
</table>
Toegang tot een individueel abstract schema object gebeurt dus via
de <strong>ldapDisplayName</strong>, wat doorgaans rechtstreeks en
bijgevolg eenvoudiger te achterhalen is dan de
<strong>distinghuishedName</strong> die je nodig hebt om toegang te
krijgen tot een reeel schema object.
<dl class="compact">
<dt>37.</dt>
<dd>Schrijf een script dat één argument vereist, namelijk de
ldapDisplayName van een klasse, een attribuut of een syntax.<br>
Initialiseer het bijhorende <em>abstract</em> schema object en
schrijf de waarde uit van alle ADSI-attributen van de
IADS-interface (zie §6).<br>
Heel verrassend, maar wel handig is dat je van dit abstract
schemaobject, met <strong>-&gt;get("cn")</strong>, ook de waarde
van het <strong>cn</strong>-attribuut bekomt van het
overeenkomstige reële schemaobject.
<p>Voer je script achtereenvolgens uit met als argument:
<strong>OrganizationalUnit, cn, printerName</strong>.</p>
<p><a class="popout" href="p6/37.pl">antwoord</a></p>
</dd>
</dl>
&nbsp;<strong><em>De ADSI IAdsProperty en IAdsClass
interfaces</em></strong>
<p>In de vorige oefening krijgen we niet echt zinvolle informatie
over het abstract schemaobject. Gelukkig (?!) heeft ADSI voor elk
van de drie types abstracte schema objecten specifieke <em>Schema
Interfaces</em> ter beschikking, respectievelijk
<strong>IAdsProperty</strong>, <strong>IAdsClass</strong> en
<strong>IAdsSyntax</strong> genoemd. Hierdoor is de toegang tot
schema objecten via het abstracte schema, veel meer meer
<em>high-level</em> dan via het reële schema.<br>
Informatie opzoeken over deze <em>Schema Interfaces</em> kan enkel
in de <strong>ADSI Library</strong> in de sectie <em><nobr>ADSI
Interfaces</nobr> / <nobr>Schema Interfaces</nobr></em>. Je vindt
er alle specifieke ADSI-attributen en methods voor elke type
abstracte schemaobjecten.</p>
<p>De ADSI-attributen van de abstracte schema objecten (er zijn er
slechts enkele&nbsp;!), komen min of meer overeen met
LDAP-attributen van de reële schema objecten, bijvoorbeeld:</p>
<table border="1" width="90%">
<tr>
<th>ADSI interface</th>
<th>ADSI-attribuut<br>
abstract object</th>
<th>LDAP-attribuut<br>
reëel object</th>
</tr>
<tr>
<td rowspan="8">IADsClass<br></td>
<td>GUID</td>
<td>objectGUID</td>
</tr>
<tr>
<td>OID</td>
<td>governsID</td>
</tr>
<tr>
<td>AuxDerivedFrom</td>
<td>systemAuxiliaryClass<br>
+&nbsp;AuxiliaryClass</td>
</tr>
<tr>
<td>Abstract</td>
<td>objectClassCategory=2</td>
</tr>
<tr>
<td>Auxiliary</td>
<td>objectClassCategory=3</td>
</tr>
<tr>
<td>PossibleSuperiors</td>
<td>systemPossSuperiors<br>
+&nbsp;possSuperiors</td>
</tr>
<tr>
<td>MandatoryProperties</td>
<td>systemMustContain<br>
+&nbsp;mustContain</td>
</tr>
<tr>
<td>OptionalProperties</td>
<td>systemMayContain<br>
+&nbsp;mayContain</td>
</tr>
<tr>
<td rowspan="5">IADsProperty<br></td>
<td>OID</td>
<td>attributeID</td>
</tr>
<tr>
<td>Syntax</td>
<td>attributeSyntax</td>
</tr>
<tr>
<td>MinRange</td>
<td>rangeLower</td>
</tr>
<tr>
<td>MaxRange</td>
<td>rangeUpper</td>
</tr>
<tr>
<td>MultiValued</td>
<td>Not isSingleValued</td>
</tr>
</table>
<p>Er zijn ook een aantal ADSI-attributen in het abstracte schema
die geen rechtstreekse informatie van 1 of meerdere LDAP-attributen
van de overeenkomstige reele klasse bevatten, maar waarvoor de
informatie is samengesteld op basis van de waarde van meerdere
LDAP-attributen van <strong>alle reële klassen</strong>. Zo beschik
je over het ADSI-attribuut <strong>Container</strong> die voor een
abstracte klasse bepaalt of ze een container object representeert.
Analoog bevat het ADSI-attribuut <strong>Containment</strong> alle
mogelijke kind-objecten. De informatie in beide attributen is
samengesteld op basis van de waarde van de LDAP-attributen
<em>systemPossSuperiors</em> en <em>possSuperiors</em> van
<strong>alle reële klassen</strong>.<br>
Ook de ADSI-attributen <strong>PossibleSuperiors</strong>,
<strong>MandatoryProperties</strong> en
<strong>OptionalProperties</strong> zijn niet enkel geconstrueerd
op basis van informatie in de klasse zelf, maar ook op die van
<strong>alle superklassen en hulpklassen</strong> waarvan de klasse
is afgeleid. Deze attributen kunnen cliënt programma's heel wat
werk besparen.</p>
<dl class="compact">
<dt>38.</dt>
<dd>Schrijf een script dat één argument vereist, de ldapDisplayName
van een klasse, en dat de waarde(n) van de meest
<em>interessante</em> ADSI-eigenschappen (hard-coderen) ervan
uitschrijft. Let erop dat een multi-valued ADSI-attribuut helaas
zowel een array van strings als één enkele string kan opleveren,
alnaargelang de waarde effectief uit meer dan één item bestaat. Dit
maakt het uitschrijven een beetje complexer. Vergelijk, voor
eenzelfde klasse, de output met die van de oefening in&nbsp;§33
<p><a class="popout" href="p6/38.pl">antwoord</a></p>
</dd>
<dt>39.</dt>
<dd>&nbsp;<strong><em>Enumeratie van alle attributen van een
object</em></strong>
<p>Het ADSI-attribuut <strong>schema</strong> (geïmplementeerd door
de IADs interface), toegepast op een willekeurig AD object,
verwijst naar het klasse object in het abstracte schema. Na
<em>binden</em> van dit abstracte schema object leveren de ADSI
interfaces van vorige sectie een eenvoudig middel om <strong>alle
verplichte en optionele attributen</strong> van dit object te
bekomen, zonder dat men zelf de hiërarchie van superklassen en
hulpklassen moet doorworstelen.</p>
<p>Gebruik deze techniek om een aangepaste versie te schrijven van
het voorbeeld in §25, waarbij de lijst van LDAP-attributen
<strong>dynamisch</strong> bepaald wordt (niet meer
<em>hard-coderen</em>). Bovendien kan je nu eenvoudig de syntax van
elk LDAP-attribuut opvragen in het abstracte schema. Net zoals in
§28 zet je de complexe syntaxen op de juiste manier om.</p>
<p><a class="popout" href="p6/39.pl">antwoord</a></p>
</dd>
<dt>40.</dt>
<dd>&nbsp;<strong><em>LDAP syntax identificaties</em></strong>
<p>Elk attribuut heeft een bepaalde <strong>syntax</strong>. Indien
men de syntax van een attribuut opvraagt in het reële schema, dan
verkrijgt men deze in <strong>X.500 object ID</strong> formaat
(bijvoorbeeld <em>2.5.5.4</em>). Bovendien zijn er twee
<strong>LDAP-attributen</strong> (zoek op welke) die samen de
syntax vastleggen. Wanneer men de syntax van hetzelfde attribuut
nagaat in het abstracte schema (met 1 ADSI-attribuut) , bekomt men
een meer intuïtive vorm (bijvoorbeeld
<em>CaseIgnoreString</em>).<br>
Meer informatie over syntaxen vind je in <em><nobr>Directory
Services</nobr> / <nobr>Directories</nobr> / <nobr>Active Directory
Schema</nobr> / Syntaxes</em></p>
<p>Schrijf een script dat het verband weergeeft tussen beide
formaten, voor alle syntaxen die in Active Directory optreden. Je
hoeft de lijst niet te sorteren. Wel mag elk koppel slechts éénmaal
voorkomen.</p>
<p><a class="popout" href="p6/40.pl">antwoord</a></p>
</dd>
</dl>

        <div id="page-content-end"></div>
    </div>
    <div id="footer">    <div id="metadata">
    Laatst gewijzigd
            op
        26-11-2013
        om
        18:06
        
                door
                    <a href="mailto:Marleen.Denert@UGent.be">Marleen Denert</a>
                
        
    </div>
<div id="tag">intranetr/0.10.0</div>
<div id="footer-end"></div>
</div>
</div>
</div>
</body>

</html>

<!-- 207 ms / 976 KB -->
